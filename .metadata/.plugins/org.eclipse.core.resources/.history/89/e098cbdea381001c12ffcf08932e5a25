package com.cos.blog.controller;



import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.client.RestTemplate;

import com.cos.blog.config.auth.PrincipalDetail;
import com.cos.blog.model.User;
import com.cos.blog.repository.UserRepository;


//인증이 안된 사용자들이 출입할 수 있는 경로 /auth/,  / 기본주소
@Controller
public class UserController {
	
	@Autowired //의존성주입
	private UserRepository userRepository;
	
//	
//	@GetMapping({"" ,  "/"})
//	public String index() {
//		return "index";
//	}

	@GetMapping("/auth/joinForm")
	public String joinForm() {
		return "user/joinForm"; // 	/WEB-INF/views/user/joinForm.jsp
	}
	
	@GetMapping("/auth/loginForm")
	public String loginForm() {
		return "user/loginForm"; // 	/WEB-INF/views/user/joinForm.jsp
	}
	
	@PostMapping("/auth/user/login")
	public String join(@RequestBody User user) {
		userRepository.save(user);
		return "index";
		
	}
	
	@GetMapping("/user/updateForm")
	public String updateForm(@AuthenticationPrincipal PrincipalDetail principal) {
		return "user/updateForm"; 
	}
	
	@GetMapping("/auth/kakao/callback") //일반적으로 key=value를 받음.
	public @ResponseBody String kakaoCallback(String code) {
		
		//POST방식으로 key=value 데이터를 요청
		RestTemplate rt = new RestTemplate();
		HttpHeaders headers = new HttpHeaders();
		headers.add("Content-type", "application/x-www-form-urlencoded;charset=utf-8");
		MultiValueMap<String, String> params = new LinkedMultiValueMap<>();
		params.add("grant_type", "authorization_code");
		
		
		return "카카오 인증완료 code " + code;
	}
	
}
