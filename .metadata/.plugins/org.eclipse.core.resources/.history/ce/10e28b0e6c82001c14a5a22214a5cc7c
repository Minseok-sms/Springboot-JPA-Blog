package com.cos.blog.controller;



import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.client.RestTemplate;

import com.cos.blog.config.auth.PrincipalDetail;
import com.cos.blog.model.KakaoProfile;
import com.cos.blog.model.OAuthToken;
import com.cos.blog.model.User;
import com.cos.blog.repository.UserRepository;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;


//인증이 안된 사용자들이 출입할 수 있는 경로 /auth/,  / 기본주소
@Controller
public class UserController {
	
	@Autowired //의존성주입
	private UserRepository userRepository;
	
//	
//	@GetMapping({"" ,  "/"})
//	public String index() {
//		return "index";
//	}

	@GetMapping("/auth/joinForm")
	public String joinForm() {
		return "user/joinForm"; // 	/WEB-INF/views/user/joinForm.jsp
	}
	
	@GetMapping("/auth/loginForm")
	public String loginForm() {
		return "user/loginForm"; // 	/WEB-INF/views/user/joinForm.jsp
	}
	
	@PostMapping("/auth/user/login")
	public String join(@RequestBody User user) {
		userRepository.save(user);
		return "index";
		
	}
	
	@GetMapping("/user/updateForm")
	public String updateForm(@AuthenticationPrincipal PrincipalDetail principal) {
		return "user/updateForm"; 
	}
	
	@GetMapping("/auth/kakao/callback") //일반적으로 key=value를 받음.
	public @ResponseBody String kakaoCallback(String code) {
		
		
		//POST방식으로 key=value 데이터를 요청
		
		RestTemplate rt = new RestTemplate();
		
		// HttpHeader 오브젝트 생성
		HttpHeaders headers = new HttpHeaders();
		headers.add("Content-type", "application/x-www-form-urlencoded;charset=utf-8");
		
		//HttpBody 오브젝트를 생성
		MultiValueMap<String, String> params = new LinkedMultiValueMap<>();
		params.add("grant_type", "authorization_code");
		params.add("client_id", "b1977faf796e0432ad7d2a601561740b");
		params.add("redirect_uri", "http://localhost:8000/auth/kakao/callback");
		params.add("code", code);
		
		//HttpHeader와 HttpBody를 하나의 오브젝트에 담기
		HttpEntity<MultiValueMap<String,String>>  kakaoTokenRequest = 
				new HttpEntity<>(params, headers);
		
		// Http 요청하기. 
		ResponseEntity<String> response = rt.exchange(
				 "https://kauth.kakao.com/oauth/token",
				 HttpMethod.POST,
				 kakaoTokenRequest,
				 String.class
		);
		// Gson, Json Simple, ObjectMapper
		ObjectMapper objectMapper = new ObjectMapper();
		OAuthToken oauthToken = null;
		try {
			oauthToken = objectMapper.readValue(response.getBody(), OAuthToken.class);
		} catch (JsonMappingException e) {
			e.printStackTrace();
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		}
		
		System.out.println("카카오 엑세스 토큰 : " + oauthToken.getAccess_token());
		
		RestTemplate rt2 = new RestTemplate();
		
		// HttpHeader 오브젝트 생성
		HttpHeaders headers2 = new HttpHeaders();
		headers2.add("Authorization", "Bearer " + oauthToken.getAccess_token()); 
		headers2.add("Content-type", "application/x-www-form-urlencoded;charset=utf-8");
		
		//HttpHeader와 HttpBody를 하나의 오브젝트에 담기
		HttpEntity<MultiValueMap<String,String>>  kakaoProfileRequest2 = 
				new HttpEntity<>(headers2);
		
		// Http 요청하기. 
		ResponseEntity<String> response2 = rt2.exchange(
				 "https://kapi.kakao.com/v2/user/me",
				 HttpMethod.POST,
				 kakaoProfileRequest2,
				 String.class
		);

		System.out.println(response2.getBody());
		ObjectMapper objectMapper2 = new ObjectMapper();
		KakaoProfile kakaoProfile = null;
		try {
			kakaoProfile = objectMapper2.readValue(response2.getBody(), kakaoProfile.class);
		} catch (JsonMappingException e) {
			e.printStackTrace();
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		}
		 
		return response2.getBody();
		
	}
	
}
